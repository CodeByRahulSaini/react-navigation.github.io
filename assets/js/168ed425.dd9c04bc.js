"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[76385],{81717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var o=t(85893),a=t(11151);const i={id:"routers",title:"Routers",sidebar_label:"Routers"},r=void 0,s={id:"routers",title:"Routers",description:"Routers define a component's navigation state, and they allow the developer to define paths and actions that can be handled.",source:"@site/versioned_docs/version-1.x/routers.md",sourceDirName:".",slug:"/routers",permalink:"/docs/1.x/routers",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/routers.md",tags:[],version:"1.x",frontMatter:{id:"routers",title:"Routers",sidebar_label:"Routers"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/1.x/custom-navigator-overview"},next:{title:"Custom navigators",permalink:"/docs/1.x/custom-navigators"}},c={},u=[{value:"Built-In Routers",id:"built-in-routers",level:2},{value:"Using Routers",id:"using-routers",level:2},{value:"Customizing Routers",id:"customizing-routers",level:2},{value:"Custom Navigation Actions",id:"custom-navigation-actions",level:3},{value:"Blocking Navigation Actions",id:"blocking-navigation-actions",level:3},{value:"Handling Custom URIs",id:"handling-custom-uris",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Routers define a component's navigation state, and they allow the developer to define paths and actions that can be handled."}),"\n",(0,o.jsx)(n.h2,{id:"built-in-routers",children:"Built-In Routers"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"react-navigation"})," ships with a few standard routers:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/react-navigation/react-navigation/blob/1.x/src/routers/StackRouter.js",children:"StackRouter"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/react-navigation/react-navigation/blob/1.x/src/routers/TabRouter.js",children:"TabRouter"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"using-routers",children:"Using Routers"}),"\n",(0,o.jsxs)(n.p,{children:["To make a navigator manually, put a static ",(0,o.jsx)(n.code,{children:"router"})," on a component."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"class MyNavigator extends React.Component {\n  static router = StackRouter(routes, config);\n  ...\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now you can use this component as a ",(0,o.jsx)(n.code,{children:"screen"})," in another navigator, and the navigation logic for ",(0,o.jsx)(n.code,{children:"MyNavigator"})," will be defined by this ",(0,o.jsx)(n.code,{children:"StackRouter"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"customizing-routers",children:"Customizing Routers"}),"\n",(0,o.jsxs)(n.p,{children:["See the ",(0,o.jsx)(n.a,{href:"/docs/1.x/custom-routers",children:"Custom Router API spec"})," to learn about the API of ",(0,o.jsx)(n.code,{children:"StackRouter"})," and ",(0,o.jsx)(n.code,{children:"TabRouter"}),". You can override the router functions as you see fit:"]}),"\n",(0,o.jsx)(n.h3,{id:"custom-navigation-actions",children:"Custom Navigation Actions"}),"\n",(0,o.jsxs)(n.p,{children:["To override navigation behavior, you can override the navigation state logic in ",(0,o.jsx)(n.code,{children:"getStateForAction"}),", and manually manipulate the ",(0,o.jsx)(n.code,{children:"routes"})," and ",(0,o.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const MyApp = StackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyApp.router.getStateForAction;\n\nMyApp.router.getStateForAction = (action, state) => {\n  if (state && action.type === 'PushTwoProfiles') {\n    const routes = [\n      ...state.routes,\n      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },\n      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },\n    ];\n    return {\n      ...state,\n      routes,\n      index: routes.length - 1,\n    };\n  }\n  return defaultGetStateForAction(action, state);\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"blocking-navigation-actions",children:"Blocking Navigation Actions"}),"\n",(0,o.jsx)(n.p,{children:"Sometimes you may want to prevent some navigation activity, depending on your route."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst MyStackRouter = StackRouter(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\n\nconst defaultGetStateForAction = MyStackRouter.router.getStateForAction;\n\nMyStackRouter.router.getStateForAction = (action, state) => {\n  if (\n    state &&\n    action.type === NavigationActions.BACK &&\n    state.routes[state.index].params.isEditing\n  ) {\n    // Returning null from getStateForAction means that the action\n    // has been handled/blocked, but there is not a new state\n    return null;\n  }\n\n  return defaultGetStateForAction(action, state);\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"handling-custom-uris",children:"Handling Custom URIs"}),"\n",(0,o.jsxs)(n.p,{children:["Perhaps your app has a unique URI which the built-in routers cannot handle. You can always extend the router ",(0,o.jsx)(n.code,{children:"getActionForPathAndParams"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { NavigationActions } from 'react-navigation';\n\nconst MyApp = StackNavigator(\n  {\n    Home: { screen: HomeScreen },\n    Profile: { screen: ProfileScreen },\n  },\n  {\n    initialRouteName: 'Home',\n  }\n);\nconst previousGetActionForPathAndParams =\n  MyApp.router.getActionForPathAndParams;\n\nObject.assign(MyApp.router, {\n  getActionForPathAndParams(path, params) {\n    if (path === 'my/custom/path' && params.magic === 'yes') {\n      // returns a profile navigate action for /my/custom/path?magic=yes\n      return NavigationActions.navigate({\n        routeName: 'Profile',\n        action: NavigationActions.navigate({\n          // This child action will get passed to the child router\n          // ProfileScreen.router.getStateForAction to get the child\n          // navigation state.\n          routeName: 'Friends',\n        }),\n      });\n    }\n    return previousGetActionForPathAndParams(path, params);\n  },\n});\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var o=t(67294);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);