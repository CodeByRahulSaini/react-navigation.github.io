"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[34863],{2800:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var i=a(85893),o=a(11151),t=a(74866),s=a(85162);const r={id:"upgrading-from-6.x",title:"Upgrading from 6.x",sidebar_label:"Upgrading from 6.x"},d=void 0,c={id:"upgrading-from-6.x",title:"Upgrading from 6.x",description:"React Navigation 7 focuses on streamlining the API to avoid patterns that can cause bugs. This means deprecating some of the legacy behavior kept for backward compatibility reasons.",source:"@site/versioned_docs/version-7.x/upgrading-from-6.x.md",sourceDirName:".",slug:"/upgrading-from-6.x",permalink:"/docs/7.x/upgrading-from-6.x",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/upgrading-from-6.x.md",tags:[],version:"7.x",frontMatter:{id:"upgrading-from-6.x",title:"Upgrading from 6.x",sidebar_label:"Upgrading from 6.x"},sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/docs/7.x/troubleshooting"},next:{title:"Stack",permalink:"/docs/7.x/stack-navigator"}},l={},h=[{value:"Minimum Requirements",id:"minimum-requirements",level:2},{value:"Breaking changes",id:"breaking-changes",level:2},{value:"The <code>navigate</code> method no longer navigates to screen in a nested child navigator",id:"the-navigate-method-no-longer-navigates-to-screen-in-a-nested-child-navigator",level:3},{value:"The <code>navigate</code> method no longer goes back, use <code>popTo</code> instead",id:"the-navigate-method-no-longer-goes-back-use-popto-instead",level:3},{value:"The <code>navigate</code> method no longer accepts a <code>key</code> option",id:"the-navigate-method-no-longer-accepts-a-key-option",level:3},{value:"The <code>onReady</code> callback on <code>NavigationContainer</code> now fires only when there are navigators rendered",id:"the-onready-callback-on-navigationcontainer-now-fires-only-when-there-are-navigators-rendered",level:3},{value:"The <code>independent</code> prop on <code>NavigationContainer</code> is removed in favor of <code>NavigationIndependentTree</code> component",id:"the-independent-prop-on-navigationcontainer-is-removed-in-favor-of-navigationindependenttree-component",level:3},{value:"The <code>theme</code> prop now accepts a <code>fonts</code> property",id:"the-theme-prop-now-accepts-a-fonts-property",level:3},{value:"Encoding of params in path position is now more relaxed",id:"encoding-of-params-in-path-position-is-now-more-relaxed",level:3},{value:"The <code>Link</code> component and <code>useLinkProps</code> hook now use screen names instead of paths",id:"the-link-component-and-uselinkprops-hook-now-use-screen-names-instead-of-paths",level:3},{value:"The <code>useLinkBuilder</code> hooks now returns an object instead of a function",id:"the-uselinkbuilder-hooks-now-returns-an-object-instead-of-a-function",level:3},{value:"Custom navigators now require more type information",id:"custom-navigators-now-require-more-type-information",level:3},{value:"The flipper devtools plugin is now removed",id:"the-flipper-devtools-plugin-is-now-removed",level:3},{value:"Various deprecated APIs are removed",id:"various-deprecated-apis-are-removed",level:3},{value:"Various UI elements now follow Material Design 3 guidelines",id:"various-ui-elements-now-follow-material-design-3-guidelines",level:3},{value:"Screens pushed on top of modals are now shown as modals in the Stack and Native Stack navigators",id:"screens-pushed-on-top-of-modals-are-now-shown-as-modals-in-the-stack-and-native-stack-navigators",level:3},{value:"<code>animationEnabled</code> option is removed in favor of <code>animation</code> option in Stack Navigator",id:"animationenabled-option-is-removed-in-favor-of-animation-option-in-stack-navigator",level:3},{value:"<code>customAnimationOnGesture</code> is renamed to <code>animationMatchesGesture</code> in Native Stack Navigator",id:"customanimationongesture-is-renamed-to-animationmatchesgesture-in-native-stack-navigator",level:3},{value:"Material Top Tab Navigator no longer requires installing <code>react-native-tab-view</code>",id:"material-top-tab-navigator-no-longer-requires-installing-react-native-tab-view",level:3},{value:"Material Bottom Tab Navigator now lives in <code>react-native-paper</code> package",id:"material-bottom-tab-navigator-now-lives-in-react-native-paper-package",level:3},{value:"The <code>unmountOnBlur</code> option is removed in favor of <code>popToTopOnBlur</code> in Bottom Tab Navigator",id:"the-unmountonblur-option-is-removed-in-favor-of-poptotoponblur-in-bottom-tab-navigator",level:3},{value:"The <code>tabBarTestID</code> option is renamed to <code>tabBarButtonTestID</code> in Bottom Tab Navigator",id:"the-tabbartestid-option-is-renamed-to-tabbarbuttontestid-in-bottom-tab-navigator",level:3},{value:"Drawer Navigator now requires Reanimated 2 or 3 on native platforms",id:"drawer-navigator-now-requires-reanimated-2-or-3-on-native-platforms",level:3},{value:"React Native Tab View now has a new API to specify various options",id:"react-native-tab-view-now-has-a-new-api-to-specify-various-options",level:3},{value:"New features",id:"new-features",level:2},{value:"Navigators now support a static configuration API",id:"navigators-now-support-a-static-configuration-api",level:3},{value:"Improved TypeScript support for <code>options</code>, <code>listeners</code> etc",id:"improved-typescript-support-for-options-listeners-etc",level:3},{value:"The <code>options</code> callback now receives <code>theme</code> in its arguments",id:"the-options-callback-now-receives-theme-in-its-arguments",level:3},{value:"Linking config now supports a top-level <code>path</code> property",id:"linking-config-now-supports-a-top-level-path-property",level:3},{value:"There&#39;s a new <code>usePreventRemove</code> hook that works with Native Stack Navigator",id:"theres-a-new-usepreventremove-hook-that-works-with-native-stack-navigator",level:3},{value:"Navigators now support a <code>layout</code> prop",id:"navigators-now-support-a-layout-prop",level:3},{value:"Screens now support a <code>layout</code> and <code>screenLayout</code> props",id:"screens-now-support-a-layout-and-screenlayout-props",level:3},{value:"Many navigators now support preloading screens",id:"many-navigators-now-support-preloading-screens",level:3},{value:"More UI elements are now links on the Web",id:"more-ui-elements-are-now-links-on-the-web",level:3},{value:"Elements library now includes many new components",id:"elements-library-now-includes-many-new-components",level:3},{value:"<code>Button</code>",id:"button",level:4},{value:"<code>HeaderButton</code>",id:"headerbutton",level:4},{value:"<code>Label</code>",id:"label",level:4},{value:"Bottom Tab Navigator can now show tabs on the side and top",id:"bottom-tab-navigator-can-now-show-tabs-on-the-side-and-top",level:3},{value:"Bottom Tab Navigator now supports animations",id:"bottom-tab-navigator-now-supports-animations",level:3},{value:"Stack Navigator now supports an <code>animation</code> option",id:"stack-navigator-now-supports-an-animation-option",level:3},{value:"Native Stack Navigator now exports a <code>useAnimatedHeaderHeight</code> hook",id:"native-stack-navigator-now-exports-a-useanimatedheaderheight-hook",level:3},{value:"Drawer Navigator now",id:"drawer-navigator-now",level:3},{value:"The drawer implementation is now available in <code>react-native-drawer-layout</code> as a standalone package",id:"the-drawer-implementation-is-now-available-in-react-native-drawer-layout-as-a-standalone-package",level:3}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"React Navigation 7 focuses on streamlining the API to avoid patterns that can cause bugs. This means deprecating some of the legacy behavior kept for backward compatibility reasons."}),"\n",(0,i.jsx)(n.p,{children:"This guides lists all the breaking changes and new features in React Navigation 7 that you need to be aware of when upgrading from React Navigation 6."}),"\n",(0,i.jsx)(n.h2,{id:"minimum-requirements",children:"Minimum Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"react-native"})," >= 0.72.0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"expo"})," >= 49 (if you use Expo)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typescript"})," >= 5.0.0 (if you use TypeScript)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,i.jsxs)(n.h3,{id:"the-navigate-method-no-longer-navigates-to-screen-in-a-nested-child-navigator",children:["The ",(0,i.jsx)(n.code,{children:"navigate"})," method no longer navigates to screen in a nested child navigator"]}),"\n",(0,i.jsxs)(n.p,{children:["Due to backward compatibility reasons, React Navigation 5 and 6 support navigating to a screen in a nested child navigator with ",(0,i.jsx)(n.code,{children:"navigation.navigate(ScreenName)"})," syntax. But this is problematic:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It only works if the navigator is already mounted - making navigation coupled to other logic."}),"\n",(0,i.jsx)(n.li,{children:"It doesn't work with the TypeScript types."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Due to these issues, we have a special API to navigate to a nested screen (",(0,i.jsx)(n.code,{children:"navigation.navigate(ParentScreenName, { screen: ScreenName })"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["From these release, this is no longer the default behavior. If you're relying on this behavior in your app, you can pass the ",(0,i.jsx)(n.code,{children:"navigationInChildEnabled"})," prop to ",(0,i.jsx)(n.code,{children:"NavigationContainer"})," to keep the behavior until you are able to migrate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<NavigationContainer navigationInChildEnabled>{/* ... */}</NavigationContainer>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"navigationInChildEnabled"})," prop will be removed in the next major."]}),"\n",(0,i.jsxs)(n.h3,{id:"the-navigate-method-no-longer-goes-back-use-popto-instead",children:["The ",(0,i.jsx)(n.code,{children:"navigate"})," method no longer goes back, use ",(0,i.jsx)(n.code,{children:"popTo"})," instead"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, ",(0,i.jsx)(n.code,{children:"navigate"})," method navigated back if the screen already exists in the stack. We have seen many people get confused by this behavior."]}),"\n",(0,i.jsxs)(n.p,{children:["To avoid this confusion, we have removed the going back behavior from ",(0,i.jsx)(n.code,{children:"navigate"})," and added a ",(0,i.jsxs)(n.a,{href:"/docs/7.x/stack-actions#popto",children:["new method ",(0,i.jsx)(n.code,{children:"popTo"})]})," to explicitly go back to a specific screen in the stack:"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- navigation.navigate('PreviousScreen', { foo: 42 });\n+ navigation.popTo('PreviousScreen', { foo: 42 });\n"})}),"\n",(0,i.jsx)(n.p,{children:"The methods now behave as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"navigate(screenName)"})," will stay on the current screen if the screen is already focused, otherwise push a new screen to the stack."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"popTo(screenName)"})," will go back to the screen if it exists in the stack, otherwise pop the current screen and add this screen to the stack."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To achieve a behavior similar to before with ",(0,i.jsx)(n.code,{children:"navigate"}),", you can use the ",(0,i.jsx)(n.a,{href:"/docs/7.x/screen#getid",children:(0,i.jsx)(n.code,{children:"getId"})})," prop in which case it'll go to the screen with the matching ID and push or pop screens accordingly."]}),"\n",(0,i.jsxs)(n.p,{children:["To help with the migration, we have added a new method called ",(0,i.jsx)(n.code,{children:"navigateDeprecated"})," which will behave like the old ",(0,i.jsx)(n.code,{children:"navigate"})," method. You can replace your current ",(0,i.jsx)(n.code,{children:"navigate"})," calls with ",(0,i.jsx)(n.code,{children:"navigateDeprecated"})," to gradually migrate to the new behavior:"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- navigation.navigate('SomeScreen');\n+ navigation.navigateDeprecated('SomeScreen');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"navigateDeprecated"})," method will be removed in the next major."]}),"\n",(0,i.jsxs)(n.h3,{id:"the-navigate-method-no-longer-accepts-a-key-option",children:["The ",(0,i.jsx)(n.code,{children:"navigate"})," method no longer accepts a ",(0,i.jsx)(n.code,{children:"key"})," option"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, you could specify a route ",(0,i.jsx)(n.code,{children:"key"})," to navigate to, e.g.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"navigation.navigate({ key: 'someuniquekey' })`\n"})}),"\n",(0,i.jsx)(n.p,{children:"It's problematic since:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," is an internal implementation detail and created by the library internally - which makes it weird to use."]}),"\n",(0,i.jsx)(n.li,{children:"None of the other actions support such usage."}),"\n",(0,i.jsxs)(n.li,{children:["Specifying a ",(0,i.jsx)(n.code,{children:"key"})," is not type-safe, making it easy to cause bugs."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In React Navigation 5, we added the ",(0,i.jsx)(n.a,{href:"/docs/7.x/screen#getid",children:(0,i.jsx)(n.code,{children:"getId"})})," prop which can be used for similar use cases - and gives users full control since they provide the ID and it's not autogenerated by the\nlibrary."]}),"\n",(0,i.jsxs)(n.p,{children:["So the ",(0,i.jsx)(n.code,{children:"key"})," option is now being removed from the ",(0,i.jsx)(n.code,{children:"navigate"})," action."]}),"\n",(0,i.jsxs)(n.h3,{id:"the-onready-callback-on-navigationcontainer-now-fires-only-when-there-are-navigators-rendered",children:["The ",(0,i.jsx)(n.code,{children:"onReady"})," callback on ",(0,i.jsx)(n.code,{children:"NavigationContainer"})," now fires only when there are navigators rendered"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, the ",(0,i.jsx)(n.code,{children:"onReady"})," prop and ",(0,i.jsx)(n.code,{children:"navigationRef.isReady()"})," worked slightly differently:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"onReady"})," callback fired when ",(0,i.jsx)(n.code,{children:"NavigationContainer"})," finishes mounting and deep links is resolved."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"navigationRef.isReady()"})," method additionally checks if there are any navigators rendered - which may not be true if the user is rendering their navigators conditionally inside a ",(0,i.jsx)(n.code,{children:"NavigationContainer"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This is important to know since if no navigator is rendered, we can't dispatch any navigation actions as there's no navigator to handle them. But the inconsistency between ",(0,i.jsx)(n.code,{children:"onReady"})," and ",(0,i.jsx)(n.code,{children:"navigationRef.isReady()"})," made it easy to cause issues and confusion."]}),"\n",(0,i.jsxs)(n.p,{children:["This changes ",(0,i.jsx)(n.code,{children:"onReady"})," to work similar to ",(0,i.jsx)(n.code,{children:"navigationRef.isReady()"}),". The ",(0,i.jsx)(n.code,{children:"onReady"})," callback will now fire only when there are navigators rendered - reflecting the value of ",(0,i.jsx)(n.code,{children:"navigationRef.isReady()"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This change is not breaking for most users, so you may not need to do anything."}),"\n",(0,i.jsxs)(n.h3,{id:"the-independent-prop-on-navigationcontainer-is-removed-in-favor-of-navigationindependenttree-component",children:["The ",(0,i.jsx)(n.code,{children:"independent"})," prop on ",(0,i.jsx)(n.code,{children:"NavigationContainer"})," is removed in favor of ",(0,i.jsx)(n.code,{children:"NavigationIndependentTree"})," component"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"independent"})," prop on ",(0,i.jsx)(n.code,{children:"NavigationContainer"})," was added to support rendering navigators in a separate tree from the rest of the app. This is useful for use cases such as miniapps."]}),"\n",(0,i.jsx)(n.p,{children:"However, there are issues with this approach:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When building a miniapp, the responsibility of adding this prop was on the miniapp developer, which isn't ideal since forgetting it can cause problems."}),"\n",(0,i.jsx)(n.li,{children:"A lot of beginners mistakenly added this prop and were confused why navigation wasn't working."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["So we've removed this prop instead of a ",(0,i.jsx)(n.code,{children:"NavigationIndependentTree"})," component which you can use to wrap the navigation container:"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"jsx",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=jsx",children:"- <NavigationContainer independent>\n-   {/* ... */}\n- </NavigationContainer>\n+ <NavigationIndependentTree>\n+   <NavigationContainer>\n+     {/* ... */}\n+   </NavigationContainer>\n+ </NavigationIndependentTree>\n"})}),"\n",(0,i.jsx)(n.p,{children:"This way, the responsibility no longer lies on the miniapp developer, but on the parent app. It's also harder for beginners to accidentally add this."}),"\n",(0,i.jsxs)(n.h3,{id:"the-theme-prop-now-accepts-a-fonts-property",children:["The ",(0,i.jsx)(n.code,{children:"theme"})," prop now accepts a ",(0,i.jsx)(n.code,{children:"fonts"})," property"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, the ",(0,i.jsx)(n.code,{children:"theme"})," prop on ",(0,i.jsx)(n.code,{children:"NavigationContainer"})," accepted a ",(0,i.jsx)(n.code,{children:"colors"})," property to customize the colors used by various UI elements from React Navigation. We have now added a ",(0,i.jsx)(n.code,{children:"fonts"})," property to customize the fonts as well. If you are passing a custom theme in the ",(0,i.jsx)(n.code,{children:"theme"})," prop, you'll need to update it to include the ",(0,i.jsx)(n.code,{children:"fonts"})," property."]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"import { DefaultTheme } from '@react-navigation/native';\n\nconst theme = {\n  colors: {\n    // ...\n  },\n+   fonts: DefaultTheme.fonts,\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to customize the fonts, see ",(0,i.jsx)(n.a,{href:"/docs/7.x/themes",children:"the themes guide"})," for more details."]}),"\n",(0,i.jsx)(n.h3,{id:"encoding-of-params-in-path-position-is-now-more-relaxed",children:"Encoding of params in path position is now more relaxed"}),"\n",(0,i.jsxs)(n.p,{children:["Previously, params were always URL encoded with ",(0,i.jsx)(n.code,{children:"encodeURIComponent"})," regardless of their position (e.g. query position such as ",(0,i.jsx)(n.code,{children:"?user=jane"})," or path position such as ",(0,i.jsx)(n.code,{children:"/users/jane"}),") when generating a link for a screen (e.g. URL on the Web). This made it hard to use special characters in the params."]}),"\n",(0,i.jsx)(n.p,{children:"Now, only the params in the query position are URL encoded. For the params in the path position, we only encode the characters that are not allowed in the path position."}),"\n",(0,i.jsxs)(n.p,{children:["With this change, it's easier to use special characters such as ",(0,i.jsx)(n.code,{children:"@"})," in the path. For example, to have a URL such as ",(0,i.jsx)(n.code,{children:"profile/@username"}),", you can use the following in the linking config:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const config = {\n  prefixes: ['https://mysite.com'],\n  config: {\n    screens: {\n      Profile: {\n        path: 'profile/:username',\n        parse: {\n          username: (username) => username.replace(/^@/, ''),\n        },\n        stringify: {\n          username: (username) => `@${username}`,\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"the-link-component-and-uselinkprops-hook-now-use-screen-names-instead-of-paths",children:["The ",(0,i.jsx)(n.code,{children:"Link"})," component and ",(0,i.jsx)(n.code,{children:"useLinkProps"})," hook now use screen names instead of paths"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, the ",(0,i.jsx)(n.code,{children:"Link"})," component and ",(0,i.jsx)(n.code,{children:"useLinkProps"})," hook were designed to work with path strings via the ",(0,i.jsx)(n.code,{children:"to"})," prop. But it had few issues:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The path strings are not type-safe, making it easy to cause typos and bugs after refactor"}),"\n",(0,i.jsx)(n.li,{children:"The API made navigating via screen name more inconvenient, even if that's the preferred approach"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Now, instead of the ",(0,i.jsx)(n.code,{children:"to"})," prop that took a path string, they now accept ",(0,i.jsx)(n.code,{children:"screen"})," and ",(0,i.jsx)(n.code,{children:"params"})," props, as well as an optional ",(0,i.jsx)(n.code,{children:"href"})," prop to use instead of the generated path:"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"jsx",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=jsx",children:'- <Link to="/details?foo=42">Go to Details</Link>\n+ <Link screen="Details" params={{ foo: 42 }}>Go to Details</Link>\n'})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- const props = useLinkProps({ to: '/details?foo=42' });\n+ const props = useLinkProps({ screen: 'Details', params: { foo: 42 } });\n"})}),"\n",(0,i.jsxs)(n.p,{children:["With this change, you'd now have full type-safety when using the ",(0,i.jsx)(n.code,{children:"Link"})," component given that you have ",(0,i.jsx)(n.a,{href:"/docs/7.x/typescript#specifying-default-types-for-usenavigation-link-ref-etc",children:"configured the global type"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"the-uselinkbuilder-hooks-now-returns-an-object-instead-of-a-function",children:["The ",(0,i.jsx)(n.code,{children:"useLinkBuilder"})," hooks now returns an object instead of a function"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, the ",(0,i.jsx)(n.code,{children:"useLinkBuilder"})," hooks returned a function to build a ",(0,i.jsx)(n.code,{children:"href"})," for a screen - which is primarily useful for building custom navigators. Now, it returns an object with ",(0,i.jsx)(n.code,{children:"buildHref"})," and ",(0,i.jsx)(n.code,{children:"buildAction"})," methods:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { buildHref, buildAction } = useLinkBuilder();\n\nconst href = buildHref('Details', { foo: 42 }); // '/details?foo=42'\nconst action = buildAction('/details?foo=42'); // { type: 'NAVIGATE', payload: { name: 'Details', params: { foo: 42 } } }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"buildHref"})," method acts the same as the previously returned function. The new ",(0,i.jsx)(n.code,{children:"buildAction"})," method can be used to build a navigation action from a ",(0,i.jsx)(n.code,{children:"href"})," string."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that this hook is intended to be primarily used by custom navigators and not by end users. For end users, the ",(0,i.jsx)(n.code,{children:"Link"})," component and ",(0,i.jsx)(n.code,{children:"useLinkProps"})," are the recommended way to navigate."]}),"\n",(0,i.jsx)(n.h3,{id:"custom-navigators-now-require-more-type-information",children:"Custom navigators now require more type information"}),"\n",(0,i.jsx)(n.p,{children:"Custom navigators now require more type information to work correctly so that we can provide better type-checking and autocompletion in TypeScript when using the navigator."}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- export const createMyNavigator =  createNavigatorFactory<\n-   MyNavigationState<ParamListBase>,\n-   MyNavigationOptions,\n-   MyNavigationEventMap,\n-   typeof MyNavigator\n- >(MyNavigator);\n+ export function createMyNavigator<\n+   ParamList extends ParamListBase,\n+   NavigatorID extends string | undefined = undefined,\n+   TypeBag extends NavigatorTypeBagBase = {\n+     ParamList: ParamList;\n+     NavigatorID: NavigatorID;\n+     State: MyNavigationState<ParamList>;\n+     ScreenOptions: MyNavigationOptions;\n+     EventMap: MyNavigationEventMap;\n+     NavigationList: {\n+       [RouteName in keyof ParamList]: MyNavigationProp<\n+         ParamList,\n+         RouteName,\n+         NavigatorID\n+       >;\n+     };\n+     Navigator: typeof MyNavigator;\n+   },\n+   Config extends StaticConfig<TypeBag> | undefined =\n+     | StaticConfig<TypeBag>\n+     | undefined,\n+ >(config?: Config): TypedNavigator<TypeBag, Config> {\n+   return createNavigatorFactory(MyNavigator)(config);\n+ }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-flipper-devtools-plugin-is-now-removed",children:"The flipper devtools plugin is now removed"}),"\n",(0,i.jsx)(n.p,{children:"Previously, we added a Flipper plugin for React Navigation to make debugging navigation easier. However, it has added significant maintenance overhead for us. The Flipper team hasn't been focused on React Native recently, so the overall experience of using Flipper with React Native has been poor."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Currently, the Flipper team has been focused on native developer experience, so we are going back to the drawing board. We have created a new pillar within our team focused on Developer Experience. We are currently investigating improved Chrome Debugger protocol support from the Hermes team as well as migrating the debugging experience from Flipper to Chrome DevTools so we can deliver a debugging experience that meets our standard."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/react-native-community/discussions-and-proposals/discussions/546#discussioncomment-4178951",children:"react-native-community/discussions-and-proposals#546 (comment)"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Since the React Native team migrating away from Flipper, it doesn't make much sense for us to spend additional resources to keep supporting it. So we've removed the Flipper plugin from ",(0,i.jsx)(n.code,{children:"@react-navigation/devtools"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"various-deprecated-apis-are-removed",children:"Various deprecated APIs are removed"}),"\n",(0,i.jsx)(n.p,{children:"We have removed all of the previously deprecated APIs. These APIs were deprecated in React Navigation 6 and showed a warning when used. So make sure that you have addressed all the warnings before upgrading."}),"\n",(0,i.jsx)(n.p,{children:"Here is the full list of removed APIs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@react-navigation/stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"mode"})," prop - use ",(0,i.jsx)(n.code,{children:"presentation"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"headerMode"})," prop - use ",(0,i.jsx)(n.code,{children:"headerMode"})," and ",(0,i.jsx)(n.code,{children:"headerShown"})," options instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"keyboardHandlingEnabled"})," prop - use ",(0,i.jsx)(n.code,{children:"keyboardHandlingEnabled"})," option instead"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@react-navigation/drawer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"openByDefault"})," prop - use ",(0,i.jsx)(n.code,{children:"defaultStatus"})," prop instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"lazy"})," prop - use ",(0,i.jsx)(n.code,{children:"lazy"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"drawerContentOptions"})," prop which contained following options:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"drawerPosition"})," - use ",(0,i.jsx)(n.code,{children:"drawerPosition"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"drawerType"})," - use ",(0,i.jsx)(n.code,{children:"drawerType"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"edgeWidth"})," - use ",(0,i.jsx)(n.code,{children:"swipeEdgeWidth"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hideStatusBar"})," - use ",(0,i.jsx)(n.code,{children:"drawerHideStatusBarOnOpen"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyboardDismissMode"})," - use ",(0,i.jsx)(n.code,{children:"keyboardDismissMode"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minSwipeDistance"})," - use ",(0,i.jsx)(n.code,{children:"swipeMinDistance"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"overlayColor"})," - use ",(0,i.jsx)(n.code,{children:"overlayColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"statusBarAnimation"})," - use ",(0,i.jsx)(n.code,{children:"drawerStatusBarAnimation"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"gestureHandlerProps"})," - use ",(0,i.jsx)(n.code,{children:"gestureHandlerProps"})," option instead"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@react-navigation/bottom-tabs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"lazy"})," prop - use ",(0,i.jsx)(n.code,{children:"lazy"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"tabBarOptions"})," prop which contained following options:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyboardHidesTabBar"})," - use ",(0,i.jsx)(n.code,{children:"tabBarHideOnKeyboard"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"activeTintColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarActiveTintColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inactiveTintColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarInactiveTintColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"activeBackgroundColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarActiveBackgroundColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inactiveBackgroundColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarInactiveBackgroundColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowFontScaling"})," - use ",(0,i.jsx)(n.code,{children:"tabBarAllowFontScaling"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showLabel"})," - use ",(0,i.jsx)(n.code,{children:"tabBarShowLabel"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"labelStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarLabelStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"iconStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarIconStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tabStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarItemStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"labelPosition"})," and ",(0,i.jsx)(n.code,{children:"adapative"})," - use ",(0,i.jsx)(n.code,{children:"tabBarLabelPosition"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tabBarVisible"})," - use ",(0,i.jsx)(n.code,{children:"display: 'none'"})," ",(0,i.jsx)(n.code,{children:"tabBarStyle"})," option instead"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@react-navigation/material-top-tabs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"swipeEnabled"})," prop - use ",(0,i.jsx)(n.code,{children:"swipeEnabled"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"lazy"})," prop - use ",(0,i.jsx)(n.code,{children:"lazy"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"lazyPlaceholder"})," prop - use ",(0,i.jsx)(n.code,{children:"lazyPlaceholder"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"lazyPreloadDistance"})," prop - use ",(0,i.jsx)(n.code,{children:"lazyPreloadDistance"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Removed ",(0,i.jsx)(n.code,{children:"tabBarOptions"})," prop which contained following options:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"renderBadge"})," - use ",(0,i.jsx)(n.code,{children:"tabBarBadge"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"renderIndicator"})," - use ",(0,i.jsx)(n.code,{children:"tabBarIndicator"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"activeTintColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarActiveTintColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inactiveTintColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarInactiveTintColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pressColor"})," - use ",(0,i.jsx)(n.code,{children:"tabBarPressColor"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pressOpacity"})," - use ",(0,i.jsx)(n.code,{children:"tabBarPressOpacity"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showLabel"})," - use ",(0,i.jsx)(n.code,{children:"tabBarShowLabel"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showIcon"})," - use ",(0,i.jsx)(n.code,{children:"tabBarShowIcon"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowFontScaling"})," - use ",(0,i.jsx)(n.code,{children:"tabBarAllowFontScaling"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"bounces"})," - use ",(0,i.jsx)(n.code,{children:"tabBarBounces"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"scrollEnabled"})," - use ",(0,i.jsx)(n.code,{children:"tabBarScrollEnabled"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"iconStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarIconStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"labelStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarLabelStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tabStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarItemStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indicatorStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarIndicatorStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indicatorContainerStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarIndicatorContainerStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"contentContainerStyle"})," - use ",(0,i.jsx)(n.code,{children:"tabBarContentContainerStyle"})," option instead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"style"})," - use ",(0,i.jsx)(n.code,{children:"tabBarStyle"})," option instead"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"various-ui-elements-now-follow-material-design-3-guidelines",children:"Various UI elements now follow Material Design 3 guidelines"}),"\n",(0,i.jsx)(n.p,{children:"Previously, the UI elements in React Navigation such as the header on platforms other than iOS, drawer, material top tabs etc. were following the Material Design 2 guidelines. We have now updated them to follow the Material Design 3 guidelines."}),"\n",(0,i.jsx)(n.h3,{id:"screens-pushed-on-top-of-modals-are-now-shown-as-modals-in-the-stack-and-native-stack-navigators",children:"Screens pushed on top of modals are now shown as modals in the Stack and Native Stack navigators"}),"\n",(0,i.jsx)(n.p,{children:"Previously, screens pushed on top of modals were shown as regular screens in the Stack and Native Stack navigators. This often caused glitchy animation on Stack Navigator and appeared behind the modal on Native Stack Navigator. This can be especially confusing if the user came to the screen from a deep link."}),"\n",(0,i.jsxs)(n.p,{children:["Now, screens pushed on top of modals are automatically shown as modals to avoid these issues. This behavior can be disabled by explicitly setting the ",(0,i.jsx)(n.code,{children:"presentation"})," option to ",(0,i.jsx)(n.code,{children:"card"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Stack.Screen\n  name=\"MyModal\"\n  component={MyModalScreen}\n  options={{\n    // highlight-next-line\n    presentation: 'card',\n  }}\n/>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"animationenabled-option-is-removed-in-favor-of-animation-option-in-stack-navigator",children:[(0,i.jsx)(n.code,{children:"animationEnabled"})," option is removed in favor of ",(0,i.jsx)(n.code,{children:"animation"})," option in Stack Navigator"]}),"\n",(0,i.jsx)(n.p,{children:"TODO"}),"\n",(0,i.jsxs)(n.h3,{id:"customanimationongesture-is-renamed-to-animationmatchesgesture-in-native-stack-navigator",children:[(0,i.jsx)(n.code,{children:"customAnimationOnGesture"})," is renamed to ",(0,i.jsx)(n.code,{children:"animationMatchesGesture"})," in Native Stack Navigator"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"customAnimationOnGesture"})," option in Native Stack Navigator is renamed to ",(0,i.jsx)(n.code,{children:"animationMatchesGesture"})," to better reflect its purpose. If you are using ",(0,i.jsx)(n.code,{children:"customAnimationOnGesture"})," in your project, you can rename it to ",(0,i.jsx)(n.code,{children:"animationMatchesGesture"}),":"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- <Stack.Navigator options={{ customAnimationOnGesture: true }}>\n+ <Stack.Navigator options={{ animationMatchesGesture: true }}>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"material-top-tab-navigator-no-longer-requires-installing-react-native-tab-view",children:["Material Top Tab Navigator no longer requires installing ",(0,i.jsx)(n.code,{children:"react-native-tab-view"})]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, ",(0,i.jsx)(n.code,{children:"@react-navigation/material-top-tabs"})," required installing ",(0,i.jsx)(n.code,{children:"react-native-tab-view"})," as a dependency in the project. We have now moved this package to the React Navigation monorepo and able to coordinate the releases together, so it's no longer necessary to install it separately."]}),"\n",(0,i.jsxs)(n.p,{children:["If you use ",(0,i.jsx)(n.code,{children:"@react-navigation/material-top-tabs"})," and don't use ",(0,i.jsx)(n.code,{children:"react-native-tab-view"})," anywhere else in your project, you can remove it from your dependencies after upgrading."]}),"\n",(0,i.jsxs)(n.p,{children:["If you need to enforce a specific version of ",(0,i.jsx)(n.code,{children:"react-native-tab-view"})," for some reason, we recommend using ",(0,i.jsx)(n.a,{href:"https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/",children:"Yarn resolutions"})," or ",(0,i.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides",children:"npm overrides"})," to do so."]}),"\n",(0,i.jsxs)(n.h3,{id:"material-bottom-tab-navigator-now-lives-in-react-native-paper-package",children:["Material Bottom Tab Navigator now lives in ",(0,i.jsx)(n.code,{children:"react-native-paper"})," package"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@react-navigation/material-bottom-tabs"})," package provided React Navigation integration for ",(0,i.jsx)(n.code,{children:"react-native-paper"}),"'s ",(0,i.jsx)(n.code,{children:"BottomNavigation"})," component. To make it easier to keep it updated with the changes in ",(0,i.jsx)(n.code,{children:"react-native-paper"}),", we have now moved it to the ",(0,i.jsx)(n.code,{children:"react-native-paper"})," package."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are using ",(0,i.jsx)(n.code,{children:"@react-navigation/material-bottom-tabs"})," in your project, you can remove it from your dependencies and change the imports to ",(0,i.jsx)(n.code,{children:"react-native-paper/react-navigation"})," instead:"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\n+ import { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"the-unmountonblur-option-is-removed-in-favor-of-poptotoponblur-in-bottom-tab-navigator",children:["The ",(0,i.jsx)(n.code,{children:"unmountOnBlur"})," option is removed in favor of ",(0,i.jsx)(n.code,{children:"popToTopOnBlur"})," in Bottom Tab Navigator"]}),"\n",(0,i.jsx)(n.p,{children:"TODO"}),"\n",(0,i.jsxs)(n.h3,{id:"the-tabbartestid-option-is-renamed-to-tabbarbuttontestid-in-bottom-tab-navigator",children:["The ",(0,i.jsx)(n.code,{children:"tabBarTestID"})," option is renamed to ",(0,i.jsx)(n.code,{children:"tabBarButtonTestID"})," in Bottom Tab Navigator"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"tabBarTestID"})," option in Bottom Tab Navigator is renamed to ",(0,i.jsx)(n.code,{children:"tabBarButtonTestID"})," to better reflect its purpose. If you are using ",(0,i.jsx)(n.code,{children:"tabBarTestID"})," in your project, you can rename it to ",(0,i.jsx)(n.code,{children:"tabBarButtonTestID"}),":"]}),"\n",(0,i.jsx)(n.pre,{"data-lang":"js",children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"lang=js",children:"- <Tab.Navigator tabBarOptions={{ tabBarTestID: 'test-id' }}>\n+ <Tab.Navigator tabBarOptions={{ tabBarButtonTestID: 'test-id' }}>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"drawer-navigator-now-requires-reanimated-2-or-3-on-native-platforms",children:"Drawer Navigator now requires Reanimated 2 or 3 on native platforms"}),"\n",(0,i.jsxs)(n.p,{children:["Previously, ",(0,i.jsx)(n.code,{children:"@react-navigation/drawer"})," supported both Reanimated 1 and Reanimated 2 APIs with the ",(0,i.jsx)(n.code,{children:"useLegacyImplementation"})," option. This is now no longer supported and the ",(0,i.jsx)(n.code,{children:"useLegacyImplementation"})," option is removed."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are using Reanimated 1 in your project, you'll need to upgrade to Reanimated 2 or 3 to use ",(0,i.jsx)(n.code,{children:"@react-navigation/drawer"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If you're using Drawer Navigator on the Web, it'll now use CSS transitions instead of Reanimated for a smaller bundle size."}),"\n",(0,i.jsx)(n.h3,{id:"react-native-tab-view-now-has-a-new-api-to-specify-various-options",children:"React Native Tab View now has a new API to specify various options"}),"\n",(0,i.jsx)(n.p,{children:"TODO"}),"\n",(0,i.jsx)(n.h2,{id:"new-features",children:"New features"}),"\n",(0,i.jsx)(n.h3,{id:"navigators-now-support-a-static-configuration-api",children:"Navigators now support a static configuration API"}),"\n",(0,i.jsx)(n.p,{children:"React Navigation 5 introduced a dynamic API to support more flexible use cases. With React Navigation 7, we are re-introducing a static configuration API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { createNativeStackNavigator } from 'react-native-screens/native-stack';\n\nconst MyStack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        title: 'My App',\n      },\n    },\n    Details: {\n      screen: DetailsScreen,\n      linking: 'details/:id',\n    },\n  },\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"The static configuration API provides the following benefits:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simpler type-checking with TypeScript, it's not necessary to specify screens and their params separately."}),"\n",(0,i.jsx)(n.li,{children:"Easier deep linking setup, the linking configuration can be defined next to the screen."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It's also possible to mix the static and dynamic configuration APIs. For example, you can use the static configuration API for the top-level navigators and the dynamic configuration API for the nested navigators where you need more flexibility."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The static configuration API doesn't replace the dynamic configuration API. Both APIs are equally supported and you can choose the one that fits your use case better."})}),"\n",(0,i.jsx)(n.p,{children:"You can see examples for both the static and dynamic configuration APIs in the documentation by selecting the appropriate tab in the examples."}),"\n",(0,i.jsxs)(n.p,{children:["Go to ",(0,i.jsx)(n.a,{href:"/docs/7.x/hello-react-navigation?config=static",children:'"Hello React Navigation"'})," to start writing some code with the static API."]}),"\n",(0,i.jsxs)(n.h3,{id:"improved-typescript-support-for-options-listeners-etc",children:["Improved TypeScript support for ",(0,i.jsx)(n.code,{children:"options"}),", ",(0,i.jsx)(n.code,{children:"listeners"})," etc"]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, the ",(0,i.jsx)(n.code,{children:"navigation"})," object received in ",(0,i.jsx)(n.code,{children:"options"})," and ",(0,i.jsx)(n.code,{children:"listeners"})," callbacks were typed as ",(0,i.jsx)(n.code,{children:"any"})," and required manual type annotation. Now, the ",(0,i.jsx)(n.code,{children:"navigation"})," object has a more accurate type based on the navigator it's used in, and the type annotation is no longer required."]}),"\n",(0,i.jsxs)(n.p,{children:["We also export a new ",(0,i.jsx)(n.code,{children:"XOptionsArgs"})," (where ",(0,i.jsx)(n.code,{children:"X"})," is the navigator name, e.g. ",(0,i.jsx)(n.code,{children:"StackOptionsArgs"}),", ",(0,i.jsx)(n.code,{children:"BottomTabOptionsArgs"})," etc.) type which can be used to type the arguments of the ",(0,i.jsx)(n.code,{children:"options"})," callback. This can be useful if you want to define the options callback separately."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const options = ({\n  route,\n}: StackOptionsArgs<RootStackParamList, 'Details'>) => {\n  return {\n    title: route.params.title,\n  };\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"the-options-callback-now-receives-theme-in-its-arguments",children:["The ",(0,i.jsx)(n.code,{children:"options"})," callback now receives ",(0,i.jsx)(n.code,{children:"theme"})," in its arguments"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"options"})," callback now receives the ",(0,i.jsx)(n.code,{children:"theme"})," object to allow customizing the UI elements specified in the options:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Stack.Screen\n  name="Details"\n  component={DetailsScreen}\n  options={({ theme }) => ({\n    headerRight: () => (\n      <IconButton\n        icon="dots-horizontal"\n        onPress={() => {}}\n        color={theme.colors.primary}\n      />\n    ),\n  })}\n/>\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"linking-config-now-supports-a-top-level-path-property",children:["Linking config now supports a top-level ",(0,i.jsx)(n.code,{children:"path"})," property"]}),"\n",(0,i.jsxs)(n.p,{children:["The linking configuration now supports a top-level ",(0,i.jsx)(n.code,{children:"path"})," configuration to define the base path for all the screens in the navigator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const linking = {\n  prefixes: ['https://mysite.com'],\n  config: {\n    // highlight-next-line\n    path: 'app',\n    screens: {\n      Home: 'home',\n      Details: 'details/:id',\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This can be useful if your app lives under a subpath on the web. For example, if your app lives under ",(0,i.jsx)(n.code,{children:"https://mysite.com/app"}),", you can define the ",(0,i.jsx)(n.code,{children:"path"})," as ",(0,i.jsx)(n.code,{children:"app"})," and the ",(0,i.jsx)(n.code,{children:"Details"})," screen will be accessible at ",(0,i.jsx)(n.code,{children:"https://mysite.com/app/details/42"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"theres-a-new-usepreventremove-hook-that-works-with-native-stack-navigator",children:["There's a new ",(0,i.jsx)(n.code,{children:"usePreventRemove"})," hook that works with Native Stack Navigator"]}),"\n",(0,i.jsx)(n.p,{children:"TODO"}),"\n",(0,i.jsxs)(n.h3,{id:"navigators-now-support-a-layout-prop",children:["Navigators now support a ",(0,i.jsx)(n.code,{children:"layout"})," prop"]}),"\n",(0,i.jsxs)(n.p,{children:["Navigators now support a ",(0,i.jsx)(n.code,{children:"layout"})," prop. It can be useful for augmenting the navigators with additional UI with a wrapper. The difference from adding a regular wrapper is that the code in ",(0,i.jsx)(n.code,{children:"layout"})," callback has access to the navigator's state, options etc.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Stack.Navigator\n  // highlight-start\n  layout={({ children, state, descriptors, navigation }) => (\n    <View style={styles.container}>\n      <Breadcrumbs />\n      {children}\n    </View>\n  )}\n  // highlight-end\n>\n  {/* ... */}\n</Stack.Navigator>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"screens-now-support-a-layout-and-screenlayout-props",children:["Screens now support a ",(0,i.jsx)(n.code,{children:"layout"})," and ",(0,i.jsx)(n.code,{children:"screenLayout"})," props"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"layout"})," prop makes it easier to provide things such as a global error boundary and suspense fallback for a group of screens without having to manually add HOCs for every screen separately."]}),"\n",(0,i.jsxs)(n.p,{children:["It can be used for a single screen with ",(0,i.jsx)(n.code,{children:"layout"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Stack.Screen\n  name="MyScreen"\n  component={MyScreenComponent}\n  // highlight-start\n  layout={({ children }) => (\n    <ErrorBoundary>\n      <React.Suspense\n        fallback={\n          <View style={styles.fallback}>\n            <Text style={styles.text}>Loading\u2026</Text>\n          </View>\n        }\n      >\n        {children}\n      </React.Suspense>\n    </ErrorBoundary>\n  )}\n  // highlight-end\n/>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Or with a group or navigator with ",(0,i.jsx)(n.code,{children:"screenLayout"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Stack.Group\n  // highlight-start\n  screenLayout={({ children }) => (\n    <ErrorBoundary>\n      <React.Suspense\n        fallback={\n          <View style={styles.fallback}>\n            <Text style={styles.text}>Loading\u2026</Text>\n          </View>\n        }\n      >\n        {children}\n      </React.Suspense>\n    </ErrorBoundary>\n  )}\n>\n  // highlight-end\n  {/* screens */}\n</Stack.Group>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"many-navigators-now-support-preloading-screens",children:"Many navigators now support preloading screens"}),"\n",(0,i.jsx)(n.p,{children:"Many navigators now support preloading screens prior to navigating to them. This can be useful to improve the perceived performance of the app by preloading the screens that the user is likely to navigate to next. Preloading a screen will render it off-screen and execute its side-effects such as data fetching."}),"\n",(0,i.jsxs)(n.p,{children:["To preload a screen, you can use the ",(0,i.jsx)(n.code,{children:"preload"})," method on the navigation object:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"navigation.preload('Details', { id: 42 });\n"})}),"\n",(0,i.jsx)(n.p,{children:"Preloading is supported in the following navigators:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stack Navigator"}),"\n",(0,i.jsx)(n.li,{children:"Bottom Tab Navigator"}),"\n",(0,i.jsx)(n.li,{children:"Material Top Tab Navigator"}),"\n",(0,i.jsx)(n.li,{children:"Drawer Navigator"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The Native Stack navigator doesn't currently support preloading screens."}),"\n",(0,i.jsx)(n.h3,{id:"more-ui-elements-are-now-links-on-the-web",children:"More UI elements are now links on the Web"}),"\n",(0,i.jsxs)(n.p,{children:["More built-in UI elements that trigger navigation now render ",(0,i.jsx)(n.code,{children:"a"})," tags on the Web for better accessibility and SEO. This includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Back button in the header"}),"\n",(0,i.jsx)(n.li,{children:"The tab buttons in material top tab navigator"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["UI elements such as the bottom tab bar and drawer items already rendered ",(0,i.jsx)(n.code,{children:"a"})," tags on the Web."]}),"\n",(0,i.jsx)(n.h3,{id:"elements-library-now-includes-many-new-components",children:"Elements library now includes many new components"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@react-navigation/elements"})," package now includes new components that can be used in your app:"]}),"\n",(0,i.jsx)(n.h4,{id:"button",children:(0,i.jsx)(n.code,{children:"Button"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Button"})," component has built-in support for navigating to screens, and renders an anchor tag on the Web when used for navigation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Button screen=\"Profile\" params={{ userId: 'jane' }}>\n  View Jane's Profile\n<Button>\n"})}),"\n",(0,i.jsx)(n.p,{children:"It can also be used as a regular button:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Button\n  onPress={() => {\n    /* do something */\n  }}\n>\n  Do something\n</Button>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The button follows the ",(0,i.jsx)(n.a,{href:"https://m3.material.io/components/buttons/overview",children:"Material Design 3 guidelines"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"headerbutton",children:(0,i.jsx)(n.code,{children:"HeaderButton"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"HeaderButton"})," component can be used to render buttons in the header with appropriate styling:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'headerRight: ({ tintColor }) => (\n  <HeaderButton\n    accessibilityLabel="More options"\n    onPress={() => {\n      /* do something */\n    }}\n  >\n    <MaterialCommunityIcons\n      name="dots-horizontal-circle-outline"\n      size={24}\n      color={tintColor}\n    />\n  </HeaderButton>\n),\n'})}),"\n",(0,i.jsx)(n.h4,{id:"label",children:(0,i.jsx)(n.code,{children:"Label"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Label"})," component can be used to render label text, such as the label in a tab bar button:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Label>Home</Label>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bottom-tab-navigator-can-now-show-tabs-on-the-side-and-top",children:"Bottom Tab Navigator can now show tabs on the side and top"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@react-navigation/bottom-tabs"})," package now supports showing tabs on the side. This will make it easier to build responsive UIs for where you want to show tabs on the bottom on smaller screens and switch to a sidebar on larger screens."]}),"\n",(0,i.jsx)(n.p,{children:"Similarly, showing tabs on the top is also supported which can be useful for Android TV or Apple TV apps."}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"tabBarPosition"})," option to customize the position of the tabs:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Tab.Navigator\n  screenOptions={{\n    // highlight-next-line\n    tabBarPosition: 'left',\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bottom-tab-navigator-now-supports-animations",children:"Bottom Tab Navigator now supports animations"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@react-navigation/bottom-tabs"})," package now supports animations. This was one of the most requested features on our Canny board: ",(0,i.jsx)(n.a,{href:"https://react-navigation.canny.io/feature-requests/p/tabnavigator-custom-transition",children:"TabNavigator Custom Transition"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"animation"})," option to customize the animations for the tab transitions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Tab.Navigator\n  screenOptions={{\n    // highlight-next-line\n    animation: 'fade',\n  }}\n>\n  {/* ... */}\n</Tab.Navigator>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"stack-navigator-now-supports-an-animation-option",children:["Stack Navigator now supports an ",(0,i.jsx)(n.code,{children:"animation"})," option"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@react-navigation/stack"})," package now supports an ",(0,i.jsx)(n.code,{children:"animation"})," option to customize the animations for the screen transitions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Stack.Navigator\n  screenOptions={{\n    // highlight-next-line\n    animation: 'slide_from_right',\n  }}\n>\n  {/* ... */}\n</Stack.Navigator>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"animation"})," option is an alternative to the ",(0,i.jsx)(n.code,{children:"TransitionPresets"})," API, and is intended to make migrating between JS stack and native stack navigators easier."]}),"\n",(0,i.jsxs)(n.h3,{id:"native-stack-navigator-now-exports-a-useanimatedheaderheight-hook",children:["Native Stack Navigator now exports a ",(0,i.jsx)(n.code,{children:"useAnimatedHeaderHeight"})," hook"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@react-navigation/native-stack"})," package now exports a ",(0,i.jsx)(n.code,{children:"useAnimatedHeaderHeight"})," hook. It can be used to animate content based on the header height changes - such as when the large title shrinks to a small title on iOS:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const headerHeight = useAnimatedHeaderHeight();\n\nreturn (\n  <Animated.View style={{ transform: { translateY: headerHeight } }}>\n    {/* ... */}\n  </Animated.View>\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"drawer-navigator-now",children:"Drawer Navigator now"}),"\n",(0,i.jsxs)(n.h3,{id:"the-drawer-implementation-is-now-available-in-react-native-drawer-layout-as-a-standalone-package",children:["The drawer implementation is now available in ",(0,i.jsx)(n.code,{children:"react-native-drawer-layout"})," as a standalone package"]}),"\n",(0,i.jsxs)(n.p,{children:["The drawer implementation used in ",(0,i.jsx)(n.code,{children:"@react-navigation/drawer"})," is now available as a standalone package called ",(0,i.jsx)(n.code,{children:"react-native-drawer-layout"}),". This makes it easier to use the drawer implementation even if you're not using React Navigation, or if you want to use it without a navigator."]}),"\n",(0,i.jsx)(n.p,{children:"You can install it with:"}),"\n",(0,i.jsxs)(t.Z,{groupId:"npm2yarn",children:[(0,i.jsx)(s.Z,{value:"npm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install react-native-drawer-layout\n"})})}),(0,i.jsx)(s.Z,{value:"yarn",label:"Yarn",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add react-native-drawer-layout\n"})})}),(0,i.jsx)(s.Z,{value:"pnpm",label:"pnpm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm add react-native-drawer-layout\n"})})})]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>s});a(67294);var i=a(86010);const o={tabItem:"tabItem_Ymn6"};var t=a(85893);function s(e){let{children:n,hidden:a,className:s}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,i.Z)(o.tabItem,s),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>y});var i=a(67294),o=a(86010),t=a(12466),s=a(16550),r=a(20469),d=a(91980),c=a(67392),l=a(50012);function h(e){var n,a;return null!=(n=null==(a=i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?n:[]}function p(e){const{values:n,children:a}=e;return(0,i.useMemo)((()=>{const e=null!=n?n:function(e){return h(e).map((e=>{let{props:{value:n,label:a,attributes:i,default:o}}=e;return{value:n,label:a,attributes:i,default:o}}))}(a);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,a])}function u(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:a}=e;const o=(0,s.k6)(),t=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,d._X)(t),(0,i.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(o.location.search);n.set(t,e),o.replace({...o.location,search:n.toString()})}),[t,o])]}function v(e){const{defaultValue:n,queryString:a=!1,groupId:o}=e,t=p(e),[s,d]=(0,i.useState)((()=>function(e){var n;let{defaultValue:a,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!u({value:a,tabValues:i}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+i.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}const o=null!=(n=i.find((e=>e.default)))?n:i[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:t}))),[c,h]=g({queryString:a,groupId:o}),[v,x]=function(e){let{groupId:n}=e;const a=function(e){return e?"docusaurus.tab."+e:null}(n),[o,t]=(0,l.Nk)(a);return[o,(0,i.useCallback)((e=>{a&&t.set(e)}),[a,t])]}({groupId:o}),m=(()=>{const e=null!=c?c:v;return u({value:e,tabValues:t})?e:null})();(0,r.Z)((()=>{m&&d(m)}),[m]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!u({value:e,tabValues:t}))throw new Error("Can't select invalid tab value="+e);d(e),h(e),x(e)}),[h,x,t]),tabValues:t}}var x=a(72389);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=a(85893);function b(e){let{className:n,block:a,selectedValue:i,selectValue:s,tabValues:r}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,t.o5)(),l=e=>{const n=e.currentTarget,a=d.indexOf(n),o=r[a].value;o!==i&&(c(n),s(o))},h=e=>{var n;let a=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{var i;const n=d.indexOf(e.currentTarget)+1;a=null!=(i=d[n])?i:d[0];break}case"ArrowLeft":{var o;const n=d.indexOf(e.currentTarget)-1;a=null!=(o=d[n])?o:d[d.length-1];break}}null==(n=a)||n.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},n),children:r.map((e=>{let{value:n,label:a,attributes:t}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>d.push(e),onKeyDown:h,onClick:l,...t,className:(0,o.Z)("tabs__item",m.tabItem,null==t?void 0:t.className,{"tabs__item--active":i===n}),children:null!=a?a:n},n)}))})}function f(e){let{lazy:n,children:a,selectedValue:o}=e;const t=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===o));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function w(e){const n=v(e);return(0,j.jsxs)("div",{className:(0,o.Z)("tabs-container",m.tabList),children:[(0,j.jsx)(b,{...e,...n}),(0,j.jsx)(f,{...e,...n})]})}function y(e){const n=(0,x.Z)();return(0,j.jsx)(w,{...e,children:h(e.children)},String(n))}},11151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>s});var i=a(67294);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);