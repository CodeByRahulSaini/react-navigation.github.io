"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[20211],{32284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(85893),a=n(11151);const i={id:"bottom-tab-navigator",title:"createBottomTabNavigator",sidebar_label:"createBottomTabNavigator"},r=void 0,s={id:"bottom-tab-navigator",title:"createBottomTabNavigator",description:"A simple tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused.",source:"@site/versioned_docs/version-3.x/bottom-tab-navigator.md",sourceDirName:".",slug:"/bottom-tab-navigator",permalink:"/docs/3.x/bottom-tab-navigator",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-3.x/bottom-tab-navigator.md",tags:[],version:"3.x",frontMatter:{id:"bottom-tab-navigator",title:"createBottomTabNavigator",sidebar_label:"createBottomTabNavigator"},sidebar:"version-3.x-docs",previous:{title:"createDrawerNavigator",permalink:"/docs/3.x/drawer-navigator"},next:{title:"createMaterialBottomTabNavigator",permalink:"/docs/3.x/material-bottom-tab-navigator"}},l={},c=[{value:"RouteConfigs",id:"routeconfigs",level:2},{value:"BottomTabNavigatorConfig",id:"bottomtabnavigatorconfig",level:2},{value:"<code>navigationOptions</code> for screens inside of the navigator",id:"navigationoptions-for-screens-inside-of-the-navigator",level:2},{value:"<code>title</code>",id:"title",level:4},{value:"<code>tabBarVisible</code>",id:"tabbarvisible",level:4},{value:"<code>tabBarIcon</code>",id:"tabbaricon",level:4},{value:"<code>tabBarLabel</code>",id:"tabbarlabel",level:4},{value:"<code>tabBarButtonComponent</code>",id:"tabbarbuttoncomponent",level:4},{value:"<code>tabBarAccessibilityLabel</code>",id:"tabbaraccessibilitylabel",level:4},{value:"<code>tabBarTestID</code>",id:"tabbartestid",level:4},{value:"<code>tabBarOnPress</code>",id:"tabbaronpress",level:4},{value:"<code>tabBarOnLongPress</code>",id:"tabbaronlongpress",level:4}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"A simple tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused."}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["For a complete usage guide please visit ",(0,o.jsx)(t.a,{href:"/docs/3.x/tab-based-navigation",children:"Tab Navigation"})]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"createBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"routeconfigs",children:"RouteConfigs"}),"\n",(0,o.jsxs)(t.p,{children:["The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route, see ",(0,o.jsx)(t.a,{href:"/docs/3.x/stack-navigator#routeconfigs",children:"example"})," from stack navigator."]}),"\n",(0,o.jsx)(t.h2,{id:"bottomtabnavigatorconfig",children:"BottomTabNavigatorConfig"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"initialRouteName"})," - The routeName for the initial tab route when first loading."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"navigationOptions"})," - Navigation options for the navigator itself, to configure a parent navigator"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"defaultNavigationOptions"})," - Default navigation options to use for screens"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"resetOnBlur"})," - Reset the state of any nested navigators when switching away from a screen. Defaults to ",(0,o.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"order"})," - Array of routeNames which defines the order of the tabs."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"paths"})," - Provide a mapping of routeName to path config, which overrides the paths set in the routeConfigs."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"backBehavior"})," - ",(0,o.jsx)(t.code,{children:"initialRoute"})," to return to initial tab, ",(0,o.jsx)(t.code,{children:"order"})," to return to previous tab, ",(0,o.jsx)(t.code,{children:"history"})," to return to last visited tab, or ",(0,o.jsx)(t.code,{children:"none"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"lazy"})," - Defaults to ",(0,o.jsx)(t.code,{children:"true"}),". If ",(0,o.jsx)(t.code,{children:"false"}),", all tabs are rendered immediately. When ",(0,o.jsx)(t.code,{children:"true"}),", tabs are rendered only when they are made active for the first time. Note: tabs are ",(0,o.jsx)(t.strong,{children:"not"})," re-rendered upon subsequent visits."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"tabBarComponent"})," - Optional, override component to use as the tab bar."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"tabBarOptions"})," - An object with the following properties:","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"activeTintColor"})," - Label and icon color of the active tab."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"activeBackgroundColor"})," - Background color of the active tab."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"inactiveTintColor"})," - Label and icon color of the inactive tab."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"inactiveBackgroundColor"})," - Background color of the inactive tab."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"showLabel"})," - Whether to show label for tab, default is true."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"showIcon"})," - Whether to show icon for tab, default is true."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"style"})," - Style object for the tab bar."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"labelStyle"})," - Style object for the tab label."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"tabStyle"})," - Style object for the tab."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"allowFontScaling"})," - Whether label font should scale to respect Text Size accessibility settings, default is true."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"adaptive"})," - Should the tab icons and labels alignment change based on screen size? Defaults to ",(0,o.jsx)(t.code,{children:"true"})," for iOS 11. If ",(0,o.jsx)(t.code,{children:"false"}),", tab icons and labels align vertically all the time. When ",(0,o.jsx)(t.code,{children:"true"}),", tab icons and labels align horizontally on tablet."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"safeAreaInset"})," - Override the ",(0,o.jsx)(t.code,{children:"forceInset"})," prop for ",(0,o.jsx)(t.code,{children:"<SafeAreaView>"}),". Defaults to ",(0,o.jsx)(t.code,{children:"{ bottom: 'always', top: 'never' }"}),". Available keys are ",(0,o.jsx)(t.code,{children:"top | bottom | left | right"})," provided with the values ",(0,o.jsx)(t.code,{children:"'always' | 'never'"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"keyboardHidesTabBar"})," - Defaults to ",(0,o.jsx)(t.code,{children:"false"}),". If ",(0,o.jsx)(t.code,{children:"true"})," hide the tab bar when keyboard opens."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"tabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["If you want to customize the ",(0,o.jsx)(t.code,{children:"tabBarComponent"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { createBottomTabNavigator, BottomTabBar } from 'react-navigation-tabs';\n\nconst TabBarComponent = (props) => <BottomTabBar {...props} />;\n\nconst TabScreens = createBottomTabNavigator({\n  tabBarComponent: (props) => (\n    <TabBarComponent {...props} style={{ borderTopColor: '#605F60' }} />\n  ),\n});\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"navigationoptions-for-screens-inside-of-the-navigator",children:[(0,o.jsx)(t.code,{children:"navigationOptions"})," for screens inside of the navigator"]}),"\n",(0,o.jsx)(t.h4,{id:"title",children:(0,o.jsx)(t.code,{children:"title"})}),"\n",(0,o.jsxs)(t.p,{children:["Generic title that can be used as a fallback for ",(0,o.jsx)(t.code,{children:"headerTitle"})," and ",(0,o.jsx)(t.code,{children:"tabBarLabel"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"tabbarvisible",children:(0,o.jsx)(t.code,{children:"tabBarVisible"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"true"})," or ",(0,o.jsx)(t.code,{children:"false"})," to show or hide the tab bar, if not set then defaults to ",(0,o.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"tabbaricon",children:(0,o.jsx)(t.code,{children:"tabBarIcon"})}),"\n",(0,o.jsxs)(t.p,{children:["React Element or a function that given ",(0,o.jsx)(t.code,{children:"{ focused: boolean, horizontal: boolean, tintColor: string }"})," returns a React.Node, to display in the tab bar. ",(0,o.jsx)(t.code,{children:"horizontal"})," is ",(0,o.jsx)(t.code,{children:"true"})," when the device is in landscape and ",(0,o.jsx)(t.code,{children:"false"})," when portrait. The icon is re-rendered whenever the device orientation changes."]}),"\n",(0,o.jsx)(t.h4,{id:"tabbarlabel",children:(0,o.jsx)(t.code,{children:"tabBarLabel"})}),"\n",(0,o.jsxs)(t.p,{children:["Title string of a tab displayed in the tab bar or React Element or a function that given ",(0,o.jsx)(t.code,{children:"{ focused: boolean, tintColor: string }"})," returns a React.Node, to display in tab bar. When undefined, scene ",(0,o.jsx)(t.code,{children:"title"})," is used. To hide, see ",(0,o.jsx)(t.code,{children:"tabBarOptions.showLabel"})," in the previous section."]}),"\n",(0,o.jsx)(t.h4,{id:"tabbarbuttoncomponent",children:(0,o.jsx)(t.code,{children:"tabBarButtonComponent"})}),"\n",(0,o.jsxs)(t.p,{children:["React Component that wraps the icon and label and implements ",(0,o.jsx)(t.code,{children:"onPress"}),". The default is a wrapper around ",(0,o.jsx)(t.code,{children:"TouchableWithoutFeedback"})," that makes it behave the same as other touchables. ",(0,o.jsx)(t.code,{children:"tabBarButtonComponent: TouchableOpacity"})," would use ",(0,o.jsx)(t.code,{children:"TouchableOpacity"})," instead."]}),"\n",(0,o.jsx)(t.h4,{id:"tabbaraccessibilitylabel",children:(0,o.jsx)(t.code,{children:"tabBarAccessibilityLabel"})}),"\n",(0,o.jsx)(t.p,{children:"Accessibility label for the tab button. This is read by the screen reader when the user taps the tab. It's recommended to set this if you don't have a label for the tab."}),"\n",(0,o.jsx)(t.h4,{id:"tabbartestid",children:(0,o.jsx)(t.code,{children:"tabBarTestID"})}),"\n",(0,o.jsx)(t.p,{children:"ID to locate this tab button in tests."}),"\n",(0,o.jsx)(t.h4,{id:"tabbaronpress",children:(0,o.jsx)(t.code,{children:"tabBarOnPress"})}),"\n",(0,o.jsx)(t.p,{children:"Callback to handle press events; the argument is an object containing:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"navigation"}),": navigation prop for the screen"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"defaultHandler"}),": the default handler for tab press"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Useful for adding a custom logic before the transition to the next scene (the\ntapped one) starts."}),"\n",(0,o.jsxs)(t.p,{children:["Define this callback without ever invoking ",(0,o.jsx)(t.code,{children:"defaultHandler"})," to prevent any navigation from occurring."]}),"\n",(0,o.jsx)(t.h4,{id:"tabbaronlongpress",children:(0,o.jsx)(t.code,{children:"tabBarOnLongPress"})}),"\n",(0,o.jsx)(t.p,{children:"Callback to handle long press events; the argument is an object containing:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"navigation"}),": navigation prop for the screen"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"defaultHandler"}),": the default handler for tab press"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var o=n(67294);const a={},i=o.createContext(a);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);